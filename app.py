# -*- coding: utf-8 -*-
"""認知モデルStreamlit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zWlTzyHZQJlZHrmbn17PXUDOfwB7TWC-
"""

import streamlit as st

# アプリのタイトル
st.title('認知予測モデルシミュレーター')

# 係数の定義
coef = {
    'Seasonality': 3654,
    '認知費(円)': 0.0004907834026,
    '指名検索費(円)': 0.00306740920,
    '記事掲載数': 22.84,
    'intercept': -68770
}

# UQ2019の選択肢
uq2019_options = {
    'January': 109,
    'February': 114,
    'March': 118,
    'April': 100,
    'May': 88,
    'June': 69,
    'July': 72,
    'August': 77,
    'September': 102,
    'October': 76,
    'November': 85,
    'December': 96
}

# ユーザー入力
selected_month = st.selectbox('予測月を選択してください', list(uq2019_options.keys()))
uq2019 = uq2019_options[selected_month]
pm_awareness = st.number_input('認知費(円)', value=0.0, format='%f')
sem_investment = st.number_input('指名検索費(円)', value=0.0, format='%f')
publications = st.number_input('記事掲載数', value=0.0, format='%f')

# 予測実行ボタン
if st.button('run'):
     # 各変数の寄与値を計算
    seasonality_contribution = round(coef['Seasonality'] * uq2019 + coef['intercept'],1)
    awareness_contribution = round(coef['認知費(円)'] * pm_awareness,1)
    sem_brand_contribution = round(coef['指名検索費(円)'] * sem_investment,1)
    publications_contribution = round(coef['記事掲載数'] * publications,1)

    # 各変数のGA寄与値を計算し、小数点第1位まで丸める
    seasonality_GA_contribution = round((coef['Seasonality'] * uq2019 + coef['intercept']) * 0.0221, 1)
    awareness_GA_contribution = round((coef['認知費(円)'] * pm_awareness) * 0.0221, 1)
    sem_brand_GA_contribution = round((coef['指名検索費(円)'] * sem_investment) * 0.0221, 1)
    publications_GA_contribution = round((coef['記事掲載数'] * publications) * 0.0221, 1)

    # 予測計算とフォーマットを指定して小数点第1位までの文字列に変換
    predicted_value = format(
        seasonality_contribution +
        awareness_contribution +
        sem_brand_contribution +
        publications_contribution,
        '.1f'
    )

    predicted_GAvalue = format(
        (seasonality_contribution +
        awareness_contribution +
        sem_brand_contribution +
        publications_contribution) * 0.0221,
        '.1f'
    )

    # 予測値の表示
    st.write(f'予測brand keyword click: {predicted_value}click = {predicted_GAvalue}GA')
    st.write('---詳細---')
    st.write(f'ベース認知 : {seasonality_contribution}click = {seasonality_GA_contribution}GA')
    st.write(f'認知費 : {awareness_contribution}click = {awareness_GA_contribution}GA')
    st.write(f'指名検索費 : {sem_brand_contribution}click = {sem_brand_GA_contribution}GA')
    st.write(f'記事掲載数 : {publications_contribution}click = {publications_GA_contribution}GA')

